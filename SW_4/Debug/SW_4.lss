
SW_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000954  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080f  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  0000136b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ff  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000138  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001bb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	41 c0       	rjmp	.+130    	; 0x11e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <util/delay.h>

int main(void)
{
	// 출력 포트 설정 (PORTB는 출력)
	DDRB = 0xFF;
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
	// 입력 포트 설정 (PORTD의 0, 1, 2번 핀은 입력)
	DDRD &= ~((1 << 0) | (1 << 1) | (1 << 2));
  a2:	81 b3       	in	r24, 0x11	; 17
  a4:	88 7f       	andi	r24, 0xF8	; 248
  a6:	81 bb       	out	0x11, r24	; 17

	uint8_t ledData = 0x01;
	uint8_t buttonData; // 버튼 입력을 받을 변수

	PORTB = 0x00;
  a8:	18 ba       	out	0x18, r1	; 24
	// 출력 포트 설정 (PORTB는 출력)
	DDRB = 0xFF;
	// 입력 포트 설정 (PORTD의 0, 1, 2번 핀은 입력)
	DDRD &= ~((1 << 0) | (1 << 1) | (1 << 2));

	uint8_t ledData = 0x01;
  aa:	91 e0       	ldi	r25, 0x01	; 1

	PORTB = 0x00;
	
	while (1)
	{
		buttonData = PIND;  // PIND의 값을 입력 받아서 변수에 대입
  ac:	80 b3       	in	r24, 0x10	; 16
		
		// 버튼 0이 눌렸을 때
		if((buttonData & (1 << 0)) == 0)
  ae:	80 fd       	sbrc	r24, 0
  b0:	1b c0       	rjmp	.+54     	; 0xe8 <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	ef e3       	ldi	r30, 0x3F	; 63
  b4:	fc e9       	ldi	r31, 0x9C	; 156
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x18>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1e>
  bc:	00 00       	nop
		{
			_delay_ms(10); // 짧은 지연 시간 (디바운싱)
			buttonData = PIND;  // 버튼 상태 재확인
  be:	80 b3       	in	r24, 0x10	; 16
			
			if((buttonData & (1 << 0)) == 0) // 안정된 상태에서 버튼 눌림 확인
  c0:	80 fd       	sbrc	r24, 0
  c2:	12 c0       	rjmp	.+36     	; 0xe8 <main+0x4a>
			{
				PORTB = ledData;  // LED 상태 변경
  c4:	98 bb       	out	0x18, r25	; 24
				ledData = (ledData >> 7) | (ledData << 1);  // LED 회전
  c6:	29 2f       	mov	r18, r25
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	99 1f       	adc	r25, r25
  d0:	99 27       	eor	r25, r25
  d2:	99 1f       	adc	r25, r25
  d4:	92 2b       	or	r25, r18
  d6:	ff ef       	ldi	r31, 0xFF	; 255
  d8:	21 ee       	ldi	r18, 0xE1	; 225
  da:	34 e0       	ldi	r19, 0x04	; 4
  dc:	f1 50       	subi	r31, 0x01	; 1
  de:	20 40       	sbci	r18, 0x00	; 0
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x3e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <main+0x48>
  e6:	00 00       	nop
				_delay_ms(100); // 버튼 입력에 대한 응답 지연
			}
		}

		// 버튼 1이 눌렸을 때
		if((buttonData & (1 << 1)) == 0)
  e8:	81 fd       	sbrc	r24, 1
  ea:	e0 cf       	rjmp	.-64     	; 0xac <main+0xe>
  ec:	ef e3       	ldi	r30, 0x3F	; 63
  ee:	fc e9       	ldi	r31, 0x9C	; 156
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <main+0x52>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x58>
  f6:	00 00       	nop
		{
			_delay_ms(10); // 짧은 지연 시간 (디바운싱)
			buttonData = PIND;  // 버튼 상태 재확인

			if((buttonData & (1 << 1)) == 0) // 안정된 상태에서 버튼 눌림 확인
  f8:	81 99       	sbic	0x10, 1	; 16
  fa:	d8 cf       	rjmp	.-80     	; 0xac <main+0xe>
			{
				PORTB = ledData;  // LED 상태 변경
  fc:	98 bb       	out	0x18, r25	; 24
				ledData = (ledData >> 1) | (ledData << 7);  // LED 회전
  fe:	f0 e8       	ldi	r31, 0x80	; 128
 100:	9f 9f       	mul	r25, r31
 102:	90 01       	movw	r18, r0
 104:	11 24       	eor	r1, r1
 106:	96 95       	lsr	r25
 108:	92 2b       	or	r25, r18
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	31 ee       	ldi	r19, 0xE1	; 225
 10e:	44 e0       	ldi	r20, 0x04	; 4
 110:	21 50       	subi	r18, 0x01	; 1
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	40 40       	sbci	r20, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x72>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x7c>
 11a:	00 00       	nop
 11c:	c7 cf       	rjmp	.-114    	; 0xac <main+0xe>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
